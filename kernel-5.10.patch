diff -Nur linux-5.10.orig/build.mk linux-5.10/build.mk
--- linux-5.10.orig/build.mk	1970-01-01 00:00:00.000000000 +0000
+++ linux-5.10/build.mk	2025-04-18 04:59:30.661058995 +0000
@@ -0,0 +1,3 @@
+-include cflag_kernel_qnap.mk
+KCPPFLAGS=$(CFLAGS_KERNEL_QNAP)
+-include Makefile
diff -Nur linux-5.10.orig/drivers/md/dm-cache-metadata.c linux-5.10/drivers/md/dm-cache-metadata.c
--- linux-5.10.orig/drivers/md/dm-cache-metadata.c	2025-02-17 15:23:32.000000000 +0000
+++ linux-5.10/drivers/md/dm-cache-metadata.c	2025-04-17 15:54:00.806061514 +0000
@@ -2466,8 +2466,6 @@
 	WRITE_LOCK_VOID(cmd);
 	cmd->force_dirty_shutdown = true;
 	WRITE_UNLOCK(cmd);
-
-	return 0;
 }
 
 int dm_cache_metadata_needs_check(struct dm_cache_metadata *cmd, bool *result)
diff -Nur linux-5.10.orig/drivers/target/iscsi/Makefile linux-5.10/drivers/target/iscsi/Makefile
--- linux-5.10.orig/drivers/target/iscsi/Makefile	2025-02-17 15:23:33.000000000 +0000
+++ linux-5.10/drivers/target/iscsi/Makefile	2025-04-17 15:54:00.806061514 +0000
@@ -39,3 +39,7 @@
 # QNAP flags
 ccflags-$(CONFIG_MACH_QNAPTS)  += -DCONFIG_MACH_QNAPTS -DCONFIG_QISCSI_LOG -DISCSI_D4_INITIATOR -DSUPPORT_ISCSI_ZERO_COPY
 ccflags-$(CONFIG_MACH_QNAPTS)  += -I$(ISCSI_LOGD_INCLUDE)
+
+# QNAP way to check all supported func, please refer script
+PWD=$(shell pwd)
+ccflags-$(CONFIG_MACH_QNAPTS)   += $(shell sh $(PWD)/drivers/target/qnap/check_func.sh)
diff -Nur linux-5.10.orig/drivers/target/qnap/target_core_qtransport.c linux-5.10/drivers/target/qnap/target_core_qtransport.c
--- linux-5.10.orig/drivers/target/qnap/target_core_qtransport.c	2025-02-17 15:23:33.000000000 +0000
+++ linux-5.10/drivers/target/qnap/target_core_qtransport.c	2025-04-17 15:54:00.806061514 +0000
@@ -1382,12 +1382,12 @@
 	struct qnap_se_dev_attr_dr *dev_attr_dr = &se_dev->dev_attrib.dev_attr_dr;
 
 	if (!qlib_thin_lun(&se_dev->dev_dr)) {
-		return -ENODEV;
+		return;
 	}
 	/* we ONLY handle the write-direction command */
 	ret = qnap_spc_get_ac_and_uc(se_dev, &a_blks, &u_blks, true);
 	if (ret != 0) {
-		return ret;
+		return;
 	}
 
 	dividend = ((a_blks + u_blks) << bs_order);
diff -Nur linux-5.10.orig/drivers/thunderbolt/domain.c linux-5.10/drivers/thunderbolt/domain.c
--- linux-5.10.orig/drivers/thunderbolt/domain.c	2025-02-17 15:23:33.000000000 +0000
+++ linux-5.10/drivers/thunderbolt/domain.c	2025-04-17 15:54:00.806061514 +0000
@@ -84,7 +84,7 @@
 	return driver->probe(svc, id);
 }
 
-static void tb_service_remove(struct device *dev)
+static int tb_service_remove(struct device *dev)
 {
 	struct tb_service *svc = tb_to_service(dev);
 	struct tb_service_driver *driver;
@@ -92,6 +92,7 @@
 	driver = container_of(dev->driver, struct tb_service_driver, driver);
 	if (driver->remove)
 		driver->remove(svc);
+	return 0;
 }
 
 static void tb_service_shutdown(struct device *dev)
diff -Nur linux-5.10.orig/fs/filesystems.c linux-5.10/fs/filesystems.c
--- linux-5.10.orig/fs/filesystems.c	2025-02-17 15:23:34.000000000 +0000
+++ linux-5.10/fs/filesystems.c	2025-04-17 15:54:00.805061512 +0000
@@ -209,21 +209,25 @@
 }
 #endif
 
-int __init get_filesystem_list(char *buf)
+void __init list_bdev_fs_names(char *buf, size_t size)
 {
-	int len = 0;
-	struct file_system_type * tmp;
+	struct file_system_type *p;
+	size_t len;
 
 	read_lock(&file_systems_lock);
-	tmp = file_systems;
-	while (tmp && len < PAGE_SIZE - 80) {
-		len += sprintf(buf+len, "%s\t%s\n",
-			(tmp->fs_flags & FS_REQUIRES_DEV) ? "" : "nodev",
-			tmp->name);
-		tmp = tmp->next;
+	for (p = file_systems; p; p = p->next) {
+		if (!(p->fs_flags & FS_REQUIRES_DEV))
+			continue;
+		len = strlen(p->name) + 1;
+		if (len > size) {
+			pr_warn("%s: truncating file system list\n", __func__);
+			break;
+		}
+		memcpy(buf, p->name, len);
+		buf += len;
+		size -= len;
 	}
 	read_unlock(&file_systems_lock);
-	return len;
 }
 
 #ifdef CONFIG_PROC_FS
diff -Nur linux-5.10.orig/include/linux/fs.h linux-5.10/include/linux/fs.h
--- linux-5.10.orig/include/linux/fs.h	2025-02-17 15:23:34.000000000 +0000
+++ linux-5.10/include/linux/fs.h	2025-04-17 15:54:00.805061512 +0000
@@ -3470,7 +3470,7 @@
 		  void *buffer, size_t *lenp, loff_t *ppos);
 int proc_nr_inodes(struct ctl_table *table, int write,
 		   void *buffer, size_t *lenp, loff_t *ppos);
-int __init get_filesystem_list(char *buf);
+void __init list_bdev_fs_names(char *buf, size_t size);
 
 #define __FMODE_EXEC		((__force int) FMODE_EXEC)
 #define __FMODE_NONOTIFY	((__force int) FMODE_NONOTIFY)
diff -Nur linux-5.10.orig/init/do_mounts.c linux-5.10/init/do_mounts.c
--- linux-5.10.orig/init/do_mounts.c	2025-02-17 15:23:34.000000000 +0000
+++ linux-5.10/init/do_mounts.c	2025-04-18 06:12:01.314478642 +0000
@@ -359,31 +359,14 @@
 __setup("rootfstype=", fs_names_setup);
 __setup("rootdelay=", root_delay_setup);
 
-static void __init get_fs_names(char *page)
+static void __init split_fs_names(char *page, char *names)
 {
-	char *s = page;
-
-	if (root_fs_names) {
-		strcpy(page, root_fs_names);
-		while (*s++) {
-			if (s[-1] == ',')
-				s[-1] = '\0';
-		}
-	} else {
-		int len = get_filesystem_list(page);
-		char *p, *next;
-
-		page[len] = '\0';
-		for (p = page-1; p; p = next) {
-			next = strchr(++p, '\n');
-			if (*p++ != '\t')
-				continue;
-			while ((*s++ = *p++) != '\n')
-				;
-			s[-1] = '\0';
-		}
+	strcpy(page, root_fs_names);
+	while (*page++) {
+		if (page[-1] == ',')
+			page[-1] = '\0';
 	}
-	*s = '\0';
+	*page = '\0';
 }
 
 static int __init do_mount_root(const char *name, const char *fs,
@@ -432,7 +415,10 @@
 
 	scnprintf(b, BDEVNAME_SIZE, "unknown-block(%u,%u)",
 		  MAJOR(ROOT_DEV), MINOR(ROOT_DEV));
-	get_fs_names(fs_names);
+	if (root_fs_names)
+		split_fs_names(fs_names, root_fs_names);
+	else
+		list_bdev_fs_names(fs_names, PAGE_SIZE);
 retry:
 	for (p = fs_names; *p; p += strlen(p)+1) {
 		int err = do_mount_root(name, p, flags, root_mount_data);
@@ -551,6 +537,45 @@
 }
 #endif
 
+static bool __init fs_is_nodev(char *fstype)
+{
+	struct file_system_type *fs = get_fs_type(fstype);
+	bool ret = false;
+
+	if (fs) {
+		ret = !(fs->fs_flags & FS_REQUIRES_DEV);
+		put_filesystem(fs);
+	}
+
+	return ret;
+}
+
+static int __init mount_nodev_root(void)
+{
+	char *fs_names, *fstype;
+	int err = -EINVAL;
+
+	fs_names = (void *)__get_free_page(GFP_KERNEL);
+	if (!fs_names)
+		return -EINVAL;
+	split_fs_names(fs_names, root_fs_names);
+
+	for (fstype = fs_names; *fstype; fstype += strlen(fstype) + 1) {
+		if (!fs_is_nodev(fstype))
+			continue;
+		err = do_mount_root(root_device_name, fstype, root_mountflags,
+				    root_mount_data);
+		if (!err)
+			break;
+		if (err != -EACCES && err != -EINVAL)
+			panic("VFS: Unable to mount root \"%s\" (%s), err=%d\n",
+			      root_device_name, fstype, err);
+	}
+
+	free_page((unsigned long)fs_names);
+	return err;
+}
+
 void __init mount_root(void)
 {
 #ifdef CONFIG_ROOT_NFS
@@ -567,6 +592,10 @@
 		return;
 	}
 #endif
+	if (ROOT_DEV == 0 && root_device_name && root_fs_names) {
+		if (mount_nodev_root() == 0)
+			return;
+	}
 #ifdef CONFIG_BLOCK
 	{
 		int err = create_dev("/dev/root", ROOT_DEV);
